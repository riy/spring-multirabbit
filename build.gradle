import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'maven-publish'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.diffplug.spotless' version '5.8.2'
    id 'org.owasp.dependencycheck' version '6.0.3'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'com.github.ManifestClasspath' version '0.1.0-RELEASE'
    id 'com.github.spotbugs' version '4.6.0'
    id "com.asarkar.gradle.build-time-tracker" version "2.0.4"
}

ext {
    springBootVersion = '2.4.0'
    configDir = "${project.projectDir}/etc/config"
    buildDate = new SimpleDateFormat("dd.MM.yyyy HH:mm").format(new Date())
}

sourceSets {
    main
    test
}

buildDir = 'target'

tasks.withType(JavaCompile) {
    options.encoding = "ISO-8859-1"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

processResources {
    filesMatching("**/application.yml") {
        filter ReplaceTokens, beginToken: '#{', endToken: '}', tokens: ['version': version, 'buildDate': buildDate]
    }
}

afterEvaluate {
    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        def excludeSpringConfigurationMetadata = 'spring-configuration-metadata.json'
        classes = classes.filter {
            !(it.path.contains(excludeSpringConfigurationMetadata))
        }
        reports {
            xml.enabled false
            html.enabled true
        }
    }
}

wrapper {
    gradleVersion = "6.7.1"
    distributionType = Wrapper.DistributionType.ALL
}

apply from: 'gradle/checkstyle.gradle'
apply from: 'gradle/dependencycheck.gradle'
apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/jacoco.gradle'
apply from: 'gradle/junit.gradle'
apply from: 'gradle/pmd.gradle'
//apply from: 'gradle/publishing.gradle'
apply from: 'gradle/spotbugs.gradle'
apply from: 'gradle/spotless.gradle'
