<?xml version="1.0"?>
<ruleset name="Ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
    PMD ruleset
  </description>

  <!-- Rules which enforce generally accepted best practices. -->
  <rule ref="category/java/bestpractices.xml">
    <exclude name="AbstractClassWithoutAbstractMethod" /> <!-- we will allow abstract base classes with abstract method -->
    <exclude name="AccessorMethodGeneration" />
    <exclude name="ArrayIsStoredDirectly" /> <!-- actually this applies to all reference types -->
    <exclude name="GuardLogStatement" /> <!-- proper use of Slf4J doesn't require guards -->
    <exclude name="UnusedPrivateField" /> <!-- configured below -->

    <!-- Testing -->
    <exclude name="JUnitAssertionsShouldIncludeMessage" /> <!-- we don't require assertion messages -->
    <exclude name="JUnitTestContainsTooManyAsserts" /> <!-- we allow multiple assertions per test -->
    <exclude name="JUnitTestsShouldIncludeAssert" />  <!-- assertions may be in private methods, or we have expected exceptions -->
  </rule>
  <rule ref="category/java/bestpractices.xml/UnusedPrivateField">
    <properties>
      <property name="ignoredAnnotations">
        <value>lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor|java.lang.Deprecated|org.mockito.Mock|org.mockito.Spy|org.mockito.InjectMocks</value>
      </property>
    </properties>
  </rule>

  <!-- Rules which enforce a specific coding style. (We are using only a selection) -->
  <rule ref="category/java/codestyle.xml/AvoidDollarSigns" />
  <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass" />
  <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending" />
  <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode" />
  <rule ref="category/java/codestyle.xml/BooleanGetMethodName" />
  <rule ref="category/java/codestyle.xml/ControlStatementBraces" />
  <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop" />
  <rule ref="category/java/codestyle.xml/PackageCase" />
  <rule ref="category/java/codestyle.xml/PrematureDeclaration" />
  <!-- Replaces the obsolete SuspiciousConstantFieldName rule -->
  <rule ref="category/java/codestyle.xml/FieldNamingConventions">
    <properties>
      <property name="publicConstantPattern" value="[a-zA-Z_0-9]*" />
      <property name="constantPattern" value="[a-zA-Z_0-9]*" />
      <property name="enumConstantPattern" value="[a-zA-Z][a-zA-Z_0-9]*" />
      <property name="finalFieldPattern" value="[a-zA-Z_0-9]*" />
      <property name="staticFieldPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="defaultFieldPattern" value="[_]?[a-z][a-zA-Z0-9]*" />
      <property name="exclusions" value="serialVersionUID" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement" />
  <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName" />
  <rule ref="category/java/codestyle.xml/UnnecessaryModifier" />
  <rule ref="category/java/codestyle.xml/UnnecessaryReturn" />
  <rule ref="category/java/codestyle.xml/UselessQualifiedThis" />

  <!-- Rules that help you discover design issues. (We are using only a selection) -->
  <rule ref="category/java/design.xml/SimplifiedTernary" />
  <rule ref="category/java/design.xml/SimplifyBooleanExpressions" />
  <rule ref="category/java/design.xml/SimplifyBooleanReturns" />
  <rule ref="category/java/design.xml/SimplifyConditional" />

  <!-- Rules to detect constructs that are either broken, extremely confusing or prone to runtime errors. -->
  <rule ref="category/java/errorprone.xml">
    <exclude name="AvoidDuplicateLiterals" /> <!-- this rule is rather painful than helpful -->
    <exclude name="AvoidFieldNameMatchingMethodName" /> <!-- both field and method can be named isFoo -->
    <exclude name="AvoidLiteralsInIfCondition" />
    <exclude name="BeanMembersShouldSerialize" />
    <exclude name="JUnitSpelling" /> <!-- we don't use junit.framework.* classes -->
    <exclude name="NullAssignment" />
    <exclude name="AssignmentInOperand" />
    <exclude name="MissingSerialVersionUID" />
  </rule>

  <!-- Rules that flag issues when dealing with multiple threads of execution. -->
  <rule ref="category/java/multithreading.xml">
    <exclude name="UseConcurrentHashMap" />
  </rule>

  <!-- Rules that flag suboptimal code. -->
  <rule ref="category/java/performance.xml">
    <exclude name="AvoidInstantiatingObjectsInLoops" /> <!-- cannot always be avoided -->
    <exclude name="RedundantFieldInitializer" /> <!-- used in components for better readability -->
    <exclude name="SimplifyStartsWith" /> <!-- used for better readability, safe for empty strings -->
  </rule>

</ruleset>

